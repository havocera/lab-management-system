name: 🚀 实验室管理系统 - 自动部署

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 代码质量检查
  lint-and-test:
    name: 🔍 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🟢 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 安装前端依赖
      run: npm ci
      
    - name: 🎨 前端代码格式检查
      run: npm run format || true
      
    - name: 🔨 构建前端项目
      run: npm run build
      
    - name: 🐘 设置 PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo_mysql, mysqli, curl, json, mbstring
        
    - name: 📦 安装 Composer 依赖
      run: |
        cd endtp
        composer install --prefer-dist --no-progress --no-dev
        
    - name: ✅ PHP 语法检查
      run: |
        cd endtp
        find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

  # Docker 镜像构建
  build-docker:
    name: 🐳 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐳 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 登录 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'
      
    - name: 🏗️ 构建并推送前端镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/labmanage-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/labmanage-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ 构建并推送后端 PHP-FPM 镜像
      uses: docker/build-push-action@v5
      with:
        context: ./endtp
        dockerfile: ./endtp/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/labmanage-php-fpm:latest
          ${{ secrets.DOCKER_USERNAME }}/labmanage-php-fpm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ 构建并推送后端 Nginx 镜像
      uses: docker/build-push-action@v5
      with:
        context: ./endtp
        dockerfile: ./endtp/Dockerfile.nginx
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/labmanage-php-nginx:latest
          ${{ secrets.DOCKER_USERNAME }}/labmanage-php-nginx:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到服务器（可选）
  deploy:
    name: 🚀 部署到服务器
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🔐 设置 SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      if: secrets.SSH_PRIVATE_KEY
        
    - name: 🚀 部署到服务器
      if: secrets.SERVER_HOST && secrets.SSH_PRIVATE_KEY
      run: |
        # 复制 docker-compose 文件到服务器
        scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/labmanage/
        scp -o StrictHostKeyChecking=no .env.example ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/labmanage/
        scp -o StrictHostKeyChecking=no labmanage.sql ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/labmanage/
        
        # SSH 到服务器并更新部署
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ~/labmanage
          
          # 创建环境变量文件（如果不存在）
          if [ ! -f .env ]; then
            cp .env.example .env
            echo "请在服务器上配置 .env 文件中的生产环境变量"
          fi
          
          # 拉取最新镜像
          docker-compose pull
          
          # 停止旧服务
          docker-compose down
          
          # 启动新服务
          docker-compose up -d
          
          # 显示服务状态
          docker-compose ps
        EOF

  # 通知部署结果
  notify:
    name: 📬 部署通知
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-docker, deploy]
    if: always()
    
    steps:
    - name: ✅ 部署成功通知
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 实验室管理系统部署成功！"
        echo "📊 前端访问: http://your-domain.com:20080"
        echo "🗄️ 数据库端口: 23306"
        
    - name: ❌ 部署失败通知
      if: needs.deploy.result == 'failure' || needs.build-docker.result == 'failure' || needs.lint-and-test.result == 'failure'
      run: |
        echo "❌ 实验室管理系统部署失败！"
        echo "🔍 请检查构建日志排查问题"