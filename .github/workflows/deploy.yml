name: Deploy Laboratory Management System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建前端
  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.API_URL || 'https://your-backend-domain.com/api' }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: dist/

  # 构建一体化Docker镜像
  build-all-in-one:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push all-in-one Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        dockerfile: Dockerfile.all-in-one
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # 自动部署到服务器
  deploy-to-server:
    needs: [build-all-in-one]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Deploy to server via SSH
      if: ${{ secrets.SERVER_HOST != '' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # 停止现有容器
          docker stop lab-management-system || true
          docker rm lab-management-system || true
          
          # 登录到GitHub Container Registry  
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像
          docker pull ghcr.io/${{ github.repository }}:latest
          
          # 启动新容器
          docker run -d \
            --name lab-management-system \
            -p 80:80 \
            --restart unless-stopped \
            -v lab_mysql_data:/var/lib/mysql \
            ghcr.io/${{ github.repository }}:latest
          
          # 等待容器启动
          sleep 10
          
          # 检查容器状态
          docker ps | grep lab-management-system
          
          # 清理旧镜像
          docker image prune -f
          
          echo "🎉 部署完成! 应用已在端口80启动"

    - name: 部署状态通知
      if: ${{ secrets.SERVER_HOST == '' }}
      run: |
        echo "⚠️  服务器部署被跳过"
        echo "要启用自动部署，请在GitHub仓库设置中添加以下Secrets:"
        echo "- SERVER_HOST: 服务器IP地址"
        echo "- SERVER_USER: SSH用户名" 
        echo "- SERVER_KEY: SSH私钥内容"
        echo "- SERVER_PORT: SSH端口 (可选，默认22)"
        echo ""
        echo "✅ Docker镜像已成功构建并推送到:"
        echo "ghcr.io/${{ github.repository }}:latest"
        echo ""
        echo "🚀 手动部署命令:"
        echo "docker run -d --name lab-management-system -p 80:80 --restart unless-stopped ghcr.io/${{ github.repository }}:latest"

  # GitHub Pages部署 (仅前端) - 手动启用
  # 要启用Pages部署，请：
  # 1. 访问仓库Settings > Pages
  # 2. Source选择"GitHub Actions"
  # 3. 取消注释以下代码块
  
  # deploy-pages:
  #   needs: build-frontend
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: frontend-dist
  #       path: dist/
  #
  #   - name: Setup Pages
  #     uses: actions/configure-pages@v4
  #
  #   - name: Upload to GitHub Pages
  #     uses: actions/upload-pages-artifact@v3
  #     with:
  #       path: dist/
  #
  #   - name: Deploy to GitHub Pages
  #     id: deployment
  #     uses: actions/deploy-pages@v4