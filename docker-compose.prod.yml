# 生产环境Docker Compose配置
version: '3.8'

services:
  # 数据库服务
  database:
    image: mysql:8.0
    container_name: labmanage_db_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - labmanage_network
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # 后端API服务
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY:-havocera/lab-management-system}-backend:latest
    container_name: labmanage_backend_prod
    restart: unless-stopped
    environment:
      DB_HOST: database
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      APP_DEBUG: false
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:80"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - labmanage_network
    volumes:
      - backend_logs:/var/log
      - backend_uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY:-havocera/lab-management-system}-frontend:latest
    container_name: labmanage_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - labmanage_network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # SSL证书目录
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: labmanage_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - labmanage_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-labmanage_redis_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx反向代理 (可选，用于负载均衡)
  nginx-proxy:
    image: nginx:alpine
    container_name: labmanage_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - labmanage_network
    profiles:
      - proxy

networks:
  labmanage_network:
    driver: bridge

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local